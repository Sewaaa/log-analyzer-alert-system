import os
# Disable proxy
os.environ.pop("HTTP_PROXY", None)
os.environ.pop("http_proxy", None)
os.environ.pop("HTTPS_PROXY", None)
os.environ.pop("https_proxy", None)

import re
import json
from pathlib import Path
import yaml
from utils.alert import send_email_alert
from datetime import datetime
from elasticsearch import Elasticsearch

# Path to the log file to analyze
LOG_FILE = "logs/auth.log"

# Regex for failed SSH logins: extracts timestamp, user, IP
FAILED_LOGIN_REGEX = re.compile(
    r"(?P<timestamp>\w+\s+\d+\s[\d:]+)\s[\w\-]+\ssshd\[\d+\]:\s"
    r"Failed password for (?:invalid user )?(?P<user>\w+) from "
    r"(?P<ip>\d+\.\d+\.\d+\.\d+)"
)

def parse_auth_log(file_path):
    events = []
    with open(file_path, "r", encoding="utf-8") as f:
        for line in f:
            m = FAILED_LOGIN_REGEX.search(line)
            if m:
                events.append({
                    "timestamp": m.group("timestamp"),
                    "user":      m.group("user"),
                    "ip":        m.group("ip"),
                    "event":     "failed_login"
                })
    return events

if __name__ == "__main__":
    # Log parsing
    events = parse_auth_log(LOG_FILE)
    print("Events extracted from log:")
    print(json.dumps(events, indent=2, ensure_ascii=False))

    # Load detection rules
    from utils.detect import load_rules, detect_anomalies
    rules = load_rules("rules/detection_rules.yaml")

    # Apply rules
    alerts = detect_anomalies(events, rules)

    # Create 'output' folder if it doesn't exist
    output_dir = Path("output")
    output_dir.mkdir(parents=True, exist_ok=True)

    # Initialize Elasticsearch client
    es = Elasticsearch("http://127.0.0.1:9200", verify_certs=False)

    # Index alerts into Elasticsearch
    for alert in alerts:
        doc = {
            **alert,
            "ingest_timestamp": datetime.utcnow().isoformat()
        }
        res = es.index(index="log_analyzer_alerts", document=doc)
        print(f"Indexed alert {alert['rule_id']} â†’ ES id={res['_id']}")

    # Save alerts to JSON file
    alerts_file = output_dir / "alerts.json"
    with open(alerts_file, "w", encoding="utf-8") as f:
        json.dump(alerts, f, indent=2, ensure_ascii=False)
    print(f"\nALERTS found: {len(alerts)}. Saved to {alerts_file}")

    # Send email
    with open("config/config.yaml", "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)

    if alerts and config.get("email", {}).get("enabled", False):
        for alert in alerts:
            subject = f"[ALERT] {alert['description']}"
            body = (
                "Security: Suspicious behavior detected\n\n"
                f"Description: {alert['description']}\n"
                f"Offender IP/User: {alert['offender']}\n"
                f"Time window: {alert['time_window_start']} - {alert['time_window_end']}\n\n"
                "This message was automatically generated by your Log Analyzer system."
            )
            success = send_email_alert(subject, body, config)
            if success:
                print(f"Email sent for alert '{alert['rule_id']}'")
            else:
                print(f"Email sending error for alert '{alert['rule_id']}'")
    else:
        if not alerts:
            print("No alerts to send via email.")
        else:
            print("Email sending is disabled in the settings.")
